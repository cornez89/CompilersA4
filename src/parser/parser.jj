/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2007 by Marc Corliss (corliss@hws.edu) and 
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the author.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/
/*
  Author: Brady Blocksom
  Author: Jermiah Bender
  Author: Zacharey Cornell
*/
options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)
  package parser;

  import ast.*;
  import util.ErrorHandler;
  import java.util.Stack;
  import java.util.Iterator;

  /** A class for performing syntactic analysis
   * */
  public class Parser {
      /** Maximum string size allowed */
      public static final int MAX_STRING_SIZE = 5000;
      /** Is debugging enabled? */
      private static boolean debug = false;
      /** Filenames of source files */
      private static String[] filenames = null;
      /** Input streams of source files */
      private static java.io.FileInputStream[] fileReaders = null;
      /** Current file number (index into filenames and fileReaders) */
      private static int fileCnt = 0;

      public Parser(String[] filenames, boolean debug) {
          // set debugging flag
          this.debug = debug;
          
          // initialize filenames field to parameter filenames
          // used later for finding the name of the current file
          this.filenames = filenames;
          
          // check that there is at least one specified filename
          if (filenames.length == 0)
              throw new RuntimeException(
                     "Must specify at least one filename to scan");
          // must initialize readers for each file (FileInputStream)
          fileReaders = new java.io.FileInputStream[filenames.length];
          for (int i = 0; i < filenames.length; i++) {
              // try...catch checks if file is found
              try {
                  // create the ith file reader
                  fileReaders[i] = new java.io.FileInputStream(filenames[i]);
              }
              catch(java.io.FileNotFoundException e) {
                  // if file not found then report an error and exit
                  System.err.println("Error: file '" +
                                     filenames[i] + "' not found");
                  System.exit(1);
              }
          }

          if (jj_initialized_once) {
              System.out.println(
              "ERROR: Second call to constructor of static parser.  You must" +
              "       either use ReInit() or set the JavaCC option STATIC to " +
              "false       during parser generation.");
              throw new Error();
          }
          jj_initialized_once = true;

          try { jj_input_stream =
                      new JavaCharStream(fileReaders[0], null, 1, 1); } 
          catch(java.io.UnsupportedEncodingException e) { 
              throw new RuntimeException(e); 
          }

          ReInit(fileReaders[0]);
      }

      /** Parse the program
        * @return parsed program as an AST (abstract syntax tree)
        * */
      public Program parse() {
          // initialize the error handler and class list
          ErrorHandler errorHandler = new ErrorHandler();
          ClassList classList = new ClassList(0);

          // loop over the files
          for (fileCnt = 0; fileCnt < fileReaders.length; fileCnt++) {
              try {
                  if (fileCnt > 0)
                        jj_input_stream.ReInit(fileReaders[fileCnt], 1, 1);
                  Program p = Parser.Program();
                  
                  for (Iterator iter = p.getClassList().getIterator();
                       iter.hasNext();
                      )
                     classList.addElement((Class_)iter.next());
              }
              catch(ParseException e) {
                  String message = e.toString();
                  int index = message.indexOf(": ");
                  message = message.substring(index+2,message.length());
                  errorHandler.register(
                       errorHandler.PARSE_ERROR, filenames[fileCnt], 
                       JavaCharStream.getBeginLine(), message);
              }
          }

          errorHandler.checkErrors();

          return new Program(0, classList);
      }

      /** Get the filename of the file currently being scanned */
      public static String getCurrFilename() {
          return filenames[fileCnt];
      }
  }
PARSER_END(Parser)

TOKEN_MGR_DECLS :
{
    // Use this for error handling
    private static ErrorHandler errorHandler = new ErrorHandler();
}

/******************************************/
/* copy your lexer rules from A1 below... */
/******************************************/

TOKEN : /* KEYWORDS and SPECIAL SYMBOLS */
{
  < CLASS: "class" >
|
  < EXTENDS: "extends" >
|
  < FOR: "for" >
|
  < WHILE: "while" >
|
  < IF: "if" >
|
  < ELSE: "else" >
|
  < RETURN: "return" >
|
  < BREAK: "break" >
|
  < NEW: "new" >
|
 < INSTANCEOF: "instanceof" >
|//SYMBOLS
  < LBRACE: "{" >
| 
  < RBRACE: "}" >
| 
  < LBRACK: "[" >
|
  < RBRACK: "]" >
| 
  < LENGTH: ".length" >
| 
  < LPARAN: "(" >
|
  < RPARAN: ")" >
| 
  < COMMA: "," >
|
  < SEMICOLON: ";" >
|// OPERATORS
  < PERIOD: "." >
|        //MATH
  < PLUS: "+" >
|
  < MINUS: "-" >
|
  < TIMES: "*" > 
|
  < DIVIDE: "/" >
|
  < MODULO: "%" >
|
  < ASSIGN: "=" >
|        //RELATIONAL
  < EQUALS: "==" >
|
  < NOT_EQUALS: "!=" >
| 
  < LESS_THAN: "<" >
|
  < GREATER_THAN: ">" > 
|
  < GREATER_EQUAL: ">=" >
|
  < LESS_EQUAL: "<=" >
|        //BOOLEAN
  < NOT: "!" >
|
  < AND: "&&" >
|
  < OR: "||" >
| 
  < XOR: "^" >
|        //INCREMENT
  < INCREMENT: "++" >
| 
  < DECREMENT: "--" >
|//UNTERMINATED MULTI_LINE
  < UNTERMINATED_MULTI_LINE_COMMENT: "/*" > { errorHandler.register(
                errorHandler.LEX_ERROR,
                Parser.getCurrFilename(),
                JavaCharStream.getBeginLine(),
                "Unterminated multi-line comment starting with /*");
          }
|//UNTERMINATED STRING CONSTANT
  < UNTERMINATED_STRING_CONSTANT: "\"" (~["\n","\r","\f", "\""] "\n")*> { errorHandler.register(
              errorHandler.LEX_ERROR,
              Parser.getCurrFilename(),
              JavaCharStream.getBeginLine(),
              "Unterminated string starting with \"");
          }

}

TOKEN : /* CONSTANTS */
{
  < INT_CONST: (["0"-"9"])+ > {
    if (Double.parseDouble(image.toString()) > Integer.MAX_VALUE) {
      errorHandler.register(
                errorHandler.LEX_ERROR,
                Parser.getCurrFilename(),
                JavaCharStream.getBeginLine(),
                "Integer exceeds maximum value allowed: " + image);
    }
  }
|
  < BOOLEAN_CONST: "true" | "false" >
|//Captures all strings without " but alls \" but no \\" also calls computeLengthAndCheck(token)
  < STRING_CONST: "\""(~["\\"] "\\\"" | ~["\r", "\f", "\""] )* "\"" > 
}

TOKEN : /* IDs - variables and methods are ID, classes are CLASS_ID */
{
  < ID: (["a"-"z"]|["A"-"Z"])(["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")* >
}

<*>
TOKEN : /* EOF */
{
  <EOF> { errorHandler.checkErrors(); }
}

SKIP : /* WHITESPACE, NEWLINES, and COMMENTS */
{
  < " " | "\n" | "\t" | "\f" >
|//LINE COMMENT
  < "//" (~["\n"])* "\n" >
|//MULTI_LINE COMMENT
  < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

TOKEN : /* Unsupported tokens - register an error */
{
  < UNSUPPORTED: (~[]) >
          { errorHandler.register(
              errorHandler.LEX_ERROR,
              Parser.getCurrFilename(),
              JavaCharStream.getBeginLine(),
              "Unsupported character: " + image);
          }
}

/******************************************/
/* Add your grammar rules with annotations
   below ...                              */
/******************************************/

/* 

Precedence (from highest to lowest)
10  new  ()
9   . (dispatch) [] ++ -- (postfix)[left]
8   - (unary) !     ++ -- (prefix) [right]
7   (casting)                      [right]
6   * / %                          [left]
5   + -                            [left]
4   < <= > >= instanceof           [left]
3   == !=                          [left]
2   &&                             [left]
1   ||                             [left]
0   =                              [right]

*/

Program Program() : 
{
  Program program;
  ClassList classList = new ClassList(JavaCharStream.getBeginLine());
  Class_ tempClass;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
    (tempClass = Class() { classList.addElement(tempClass); })+ <EOF> 
    {
      program = new Program(lineNum, classList); 
      return program;
    }
}

Class_ Class() :
{
  Token name;
  Token parent = null;
  Member tempMember;
  MemberList memberList;
  Class_ classNode;
  int lineNum;
}
{ 
    <CLASS>
    {
      lineNum = JavaCharStream.getBeginLine();
    }
    name = <ID> (<EXTENDS> parent = <ID>)? 
    {
      memberList = new MemberList(JavaCharStream.getBeginLine());
    } <LBRACE> (tempMember = Member() { memberList.addElement(tempMember); })*
    <RBRACE>
    {
      if (parent == null) {
        classNode = new Class_(lineNum, Parser.getCurrFilename(), 
                                name.image, "Object", memberList);
      } else {
        classNode = new Class_(lineNum, Parser.getCurrFilename(), 
                              name.image, parent.image, memberList);
      }
      return classNode;
    }
}

Member Member() : 
{
  Member member;
  Token type;
  String typeImage;
  Token name;
  
} 
{ 
  type = <ID> { typeImage = type.image; }  
  (<LBRACK> <RBRACK> { typeImage += "[]"; } )? name = <ID> 
  (
    member = Method(typeImage, name.image)  
  | member = Field(typeImage, name.image)
  ) 
    {
      return member;
    }
}

Method Method(String returnType, String name) :
{
  Formal tempFormal;
  FormalList formalList = null;
  Stmt tempStmt;
  StmtList stmtList;
  Method method;
  int lineNum = JavaCharStream.getBeginLine();
}
{ 
    <LPARAN> 
    {
      formalList = new FormalList(lineNum);
    }
    (tempFormal = Formal() { formalList.addElement(tempFormal); } 
    (<COMMA> tempFormal = Formal() { formalList.addElement(tempFormal); } )*)?
    <RPARAN> <LBRACE> 
    {
      stmtList = new StmtList(lineNum);
    } (tempStmt = Stmt() { stmtList.addElement(tempStmt); } )* <RBRACE> 
    {
      method = new Method(lineNum, returnType, name, formalList, stmtList);
      return method;
    }
}

Field Field(String type, String name) : 
{
  Field field;
  Expr init = null;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
    (<ASSIGN> init = Expr())? <SEMICOLON> 
    { 
      field = new Field(lineNum, type, name, init);
      return field;
    } 
}

Formal Formal() : 
{
  Formal formal;
  Token type;
  String typeImage;
  Token name;
} 
{ 
  type = <ID> { typeImage = type.image; } 
  (<LBRACK> <RBRACK> { typeImage += "[]"; })? name = <ID>
  {
    formal = new Formal(JavaCharStream.getBeginLine(), typeImage, name.image);
    return formal;
  } 
}

Stmt Stmt() :
{
  Stmt stmt;
}
{
    LOOKAHEAD(5)
    stmt = ExprStmt() 
    {
      return stmt;
    }
  | stmt = DeclStmt() 
    {
      return stmt;
    }
  | stmt = IfStmt() 
    {
      return stmt;
    }
  | stmt = WhileStmt() 
    {
      return stmt;
    }
  | stmt = ForStmt() 
    {
      return stmt;
    }
  | stmt = BreakStmt() 
    {
      return stmt;
    }
  | stmt = ReturnStmt() 
    {
      return stmt;
    }
  | stmt = BlockStmt() 
    {
      return stmt;
    }
}

ExprStmt ExprStmt() : 
{
  ExprStmt exprStmt;
  Expr expr;
  int lineNum = JavaCharStream.getBeginLine();
} 
{
  expr = Expr() <SEMICOLON>
    {
      exprStmt = new ExprStmt(lineNum, expr);
      return exprStmt;
    }
}

DeclStmt DeclStmt() :
{
  DeclStmt declStmt;
  Token type;
  String typeImage;
  Token name;
  Expr init = null;
  int lineNum = JavaCharStream.getBeginLine();
}
{
  type = <ID> { typeImage = type.image; }
  (<LBRACK> <RBRACK> { typeImage += "[]"; } )? 
  name = <ID> 
  <ASSIGN> init = Expr() <SEMICOLON>
    {
      declStmt = new DeclStmt(lineNum, typeImage, name.image, init);
      return declStmt;
    }  
}

IfStmt IfStmt() : 
{
  IfStmt ifStmt;
  Expr predExpr;
  Stmt thenStmt;
  Stmt elseStmt;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  <IF> <LPARAN> predExpr = Expr() <RPARAN> 
  thenStmt = Stmt() 
  elseStmt = IfStmta(lineNum)
    {
      ifStmt = new IfStmt(lineNum, predExpr, thenStmt, elseStmt);
      return ifStmt;
    }
}

Stmt IfStmta(int lineNum) : 
{
  Stmt stmt;
  StmtList stmtList;
} 
{ 
    <ELSE> stmt = Stmt() 
    {
      return stmt;
    }
  | {
      stmtList = new StmtList(lineNum);
      return new BlockStmt(lineNum, stmtList);
    } 
}

WhileStmt WhileStmt() : 
{
  WhileStmt whileStmt;
  Expr predExpr;
  Stmt bodyStmt;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  <WHILE> <LPARAN> predExpr = Expr() <RPARAN> bodyStmt = Stmt()
    {
      whileStmt = new WhileStmt(lineNum, predExpr, bodyStmt);
      return whileStmt;
    } 
}

ForStmt ForStmt() :
{
  ForStmt forStmt;
  Expr initExpr = null;
  Expr predExpr = null;
  Expr updateExpr = null;
  Stmt bodyStmt;
  int lineNum = JavaCharStream.getBeginLine();
}
{
  <FOR> <LPARAN>
    (initExpr = Expr())? <SEMICOLON> 
    (predExpr = Expr())? <SEMICOLON> 
    (updateExpr = Expr())?
    <RPARAN> bodyStmt = Stmt()
    {
      forStmt = new ForStmt(lineNum, initExpr, predExpr, updateExpr, bodyStmt);
      return forStmt;
    }
}

BreakStmt BreakStmt() : 
{
  BreakStmt breakStmt;
} 
{ 
  <BREAK> <SEMICOLON> {
    breakStmt = new BreakStmt(JavaCharStream.getBeginLine());
    return breakStmt;
  }
}

ReturnStmt ReturnStmt() : 
{
  ReturnStmt returnStmt;
  Expr expr = null;      
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  <RETURN> (expr = Expr())? <SEMICOLON>
  {
    returnStmt = new ReturnStmt(lineNum, expr);
    return returnStmt;
  } 
}

BlockStmt BlockStmt() : 
{
  BlockStmt blockStmt;
  Stmt tempStmt;
  StmtList stmtList;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  <LBRACE> 
  {
    stmtList = new StmtList(lineNum);
  }
  (tempStmt = Stmt() { stmtList.addElement(tempStmt); } )* <RBRACE> 
  {
    blockStmt = new BlockStmt(lineNum, stmtList);
    return blockStmt;
  } 
}

Expr Expr() :
{
  Expr leftExpr;
  Expr expr;
}
{
  leftExpr = Expr1()
  expr = Expra(leftExpr)
    {
      return expr;
    } 
}

Expr Expra(Expr leftExpr) : 
{
  Expr rightExpr;
  ArrayExpr arrayExpr;
  VarExpr varExpr;
  Expr expr = null;
  Expr index;
  String name;
  String refName;
} 
{   
  <ASSIGN> rightExpr = Expr() 
   {
    if (leftExpr instanceof ArrayExpr) {
        arrayExpr = (ArrayExpr) leftExpr;
        name = arrayExpr.getName();
        varExpr = ((VarExpr) arrayExpr.getRef());

        if (varExpr == null) {
          refName = null;
        } else {
          refName = varExpr.getName();
        }

        index = arrayExpr.getIndex();
        expr = new ArrayAssignExpr(JavaCharStream.getBeginLine(), 
                                    refName, name, index, rightExpr);
      } else if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr;
        name = varExpr.getName();
        varExpr = ((VarExpr) varExpr.getRef());

        if (varExpr == null) {
          refName = null;
        } else {
          refName = varExpr.getName();
        }

        expr = new AssignExpr(JavaCharStream.getBeginLine(), refName, name,
                                                                 rightExpr);
      } else {
        //ERROR 
        throw new ParseException(
          "For AssignmentExpression: <?> =, ? must be VarExpr or ArrayExpr." +
           "Given: " + rightExpr.getClass().getSimpleName() + ".");
        expr = new AssignExpr(JavaCharStream.getBeginLine(), null, "error", 
                                                                      null);
      }
      return expr;
    } 
  | {
      return leftExpr;
    } 
}

Expr Expr1() : 
{
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  leftExpr = Expr2() 
  (
    {
      lineNum = JavaCharStream.getBeginLine(); 
    }
    <OR>
    rightExpr = Expr2()
    {
      leftExpr = new BinaryLogicOrExpr(lineNum, leftExpr, rightExpr);
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr2() : 
{
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  leftExpr = Expr3() 
  (
    { 
      lineNum = JavaCharStream.getBeginLine();
    }  
    <AND>
    rightExpr = Expr3()
    {
      leftExpr = new BinaryLogicAndExpr(lineNum, leftExpr, rightExpr);
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr3() : 
{
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
}
{ 
  leftExpr = Expr4() 
  (
    {
      lineNum = JavaCharStream.getBeginLine();
    }
    <EQUALS>
    rightExpr = Expr4()
    {
      leftExpr = new BinaryCompEqExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <NOT_EQUALS>
    rightExpr = Expr4()
    {
      leftExpr = new BinaryCompNeExpr(lineNum, leftExpr, rightExpr);
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr4() : 
{
  Expr leftExpr;
  Expr rightExpr;
  Token type = null;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  leftExpr = Expr5() 
  (
    {
      lineNum = JavaCharStream.getBeginLine(); 
    }
    <LESS_THAN>
    rightExpr = Expr5()
    {
      leftExpr = new BinaryCompLtExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <LESS_EQUAL>
    rightExpr = Expr5()
    {
      leftExpr = new BinaryCompLeqExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <GREATER_THAN>
    rightExpr = Expr5()
    {
      leftExpr = new BinaryCompGtExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <GREATER_EQUAL>
    rightExpr = Expr5()
    {
      leftExpr = new BinaryCompGeqExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <INSTANCEOF>
    type = <ID>
    (
      <LBRACK> <RBRACK>
      {
        type.image += "[]";
      }
    )?
    {
      leftExpr = new InstanceofExpr(lineNum, leftExpr, type.image); 
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr5() : 
{
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  leftExpr = Expr6() 
  (
    {
      lineNum = JavaCharStream.getBeginLine(); 
    }
    <PLUS>
    rightExpr = Expr6()
    {
      leftExpr = new BinaryArithPlusExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <MINUS>
    rightExpr = Expr6()
    {
      leftExpr = new BinaryArithMinusExpr(lineNum, leftExpr, rightExpr);
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr6() : 
{
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
} 
{ 
  leftExpr = Expr7() 
  (
    {
      lineNum = JavaCharStream.getBeginLine(); 
    }
    <TIMES>
    rightExpr = Expr7()
    {
      leftExpr = new BinaryArithTimesExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <DIVIDE>
    rightExpr = Expr7()
    {
      leftExpr = new BinaryArithDivideExpr(lineNum, leftExpr, rightExpr);
    }
  |
    <MODULO>
    rightExpr = Expr7()
    {
      leftExpr = new BinaryArithModulusExpr(lineNum, leftExpr, rightExpr);
    }
  )*
  {
    return leftExpr;
  }
}

Expr Expr7() :
{
  Token type;
  String typeImage;
  CastExpr castExpr;
  Expr expr;
}
{
    LOOKAHEAD(6)
    <LPARAN> type = <ID> { typeImage = type.image; }
    (<LBRACK> <RBRACK> { typeImage += "[]"; })? 
    <RPARAN> <LPARAN> expr = Expr1() <RPARAN>
    {
      castExpr = new CastExpr(JavaCharStream.getBeginLine(), typeImage, expr);
      return castExpr;
    }
  | expr = Expr8() 
    {
      return expr;
    }
}

Expr Expr8() :
{
  Expr expr;
  UnaryNegExpr negExpr;
  UnaryNotExpr notExpr;
  UnaryDecrExpr decExpr;
  UnaryIncrExpr incrExpr;
}
{
    <MINUS> expr = Expr8() 
      {
        negExpr = new UnaryNegExpr(JavaCharStream.getBeginLine(), expr);
        return negExpr;
      } 
  | <NOT> expr = Expr8() 
      { 
        notExpr = new UnaryNotExpr(JavaCharStream.getBeginLine(), expr);
        return notExpr;
      }  
  | <DECREMENT> expr = Expr8() 
      {
        decExpr = new UnaryDecrExpr(JavaCharStream.getBeginLine(), expr, 
                                                                        false);
        return decExpr;
      }  
  | <INCREMENT> expr = Expr8() 
      {
        incrExpr = new UnaryIncrExpr(JavaCharStream.getBeginLine(), expr, 
                                                                        false);
        return incrExpr;
      }  
  | expr = Expr9() 
      {
        return expr;
      }  
}
                        
Expr Expr9() : 
{
  Expr leftExpr;
  VarExpr varExpr = null;
  ArrayExpr arrayExpr = null;
  Expr index = null;
  Expr tempArg = null;
  ExprList args = null;
  Token name;
  int lineNum = JavaCharStream.getBeginLine();
}
{ 
  
  leftExpr = Expr10() 
  (
    {
      lineNum = JavaCharStream.getBeginLine(); 
    }
    <INCREMENT>
    {
      leftExpr = new UnaryIncrExpr(lineNum, leftExpr, true);
    }
  |
    <DECREMENT>
    {
      leftExpr = new UnaryDecrExpr(lineNum, leftExpr, true);
    }
  | //Array Access - leftExpr must be a VarExpr
    <LBRACK> index = Expr1() <RBRACK>
    {
      if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr;
      } else { //Error
        throw new ParseException("For ArrayExpr: <?> [index], ? must be a" 
          + "VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");
        varExpr = new VarExpr(JavaCharStream.getBeginLine(), null, "error");
      }     
      leftExpr = new ArrayExpr(JavaCharStream.getBeginLine(), varExpr.getRef(),
                                                     varExpr.getName(), index);
    }
  | //dynamic dispatch
    <PERIOD> name = <ID>
    {
      args = new ExprList(JavaCharStream.getBeginLine());
    }
    (
      <LPARAN>
      (
        tempArg = Expr1() { args.addElement(tempArg); } 
        ( 
          <COMMA> tempArg = Expr1() 
          { 
            args.addElement(tempArg); 
          } 
        )*
      )?
      <RPARAN>
    )
    {
     if (name == null) {//ASSUMPTION leftExpr is VarExpr
        varExpr = (VarExpr) leftExpr; 
        if (varExpr.getRef() == null) {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), 
            new VarExpr(JavaCharStream.getBeginLine(), null, "this"), 
            varExpr.getName(), args);
        } else {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), 
            varExpr.getRef(), varExpr.getName(), args);
        }
      } else { 
        leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), leftExpr, 
          name.image, args);
      }
    } 
  | //normal dispatch
    {
      args = new ExprList(JavaCharStream.getBeginLine());
    }
    <LPARAN>
    (
      tempArg = Expr1() { args.addElement(tempArg); } 
      ( 
        <COMMA> tempArg = Expr1() 
        { 
          args.addElement(tempArg); 
        } 
      )*
    )?
    <RPARAN>
    {
      if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr; 
        if (varExpr.getRef() == null) {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), 
            new VarExpr(JavaCharStream.getBeginLine(), null, "this"), 
            varExpr.getName(), args);
        } else {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), 
            varExpr.getRef(), varExpr.getName(), args);
        }
      } else { //Error
        throw new ParseException("For ArrayExpr: <?> [index], ? must be a"
          + "VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");
        leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), 
          new VarExpr(JavaCharStream.getBeginLine(), null, "this"), 
          "error", args);
      } 
    }
  | //length of an array
    <LENGTH>
    {
      if (leftExpr instanceof NewArrayExpr || leftExpr instanceof VarExpr) {
        leftExpr = new VarExpr(JavaCharStream.getBeginLine(), leftExpr, "length");
      } else { //Error
        throw new ParseException("For ArrayExpr: <?> [index], ? must be a "
          + "NewArrayExpr or VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");
        leftExpr = new VarExpr(JavaCharStream.getBeginLine(), 
          new VarExpr(JavaCharStream.getBeginLine(), null, "this"), 
          "error");
      } 
    }
  )*
  {
    return leftExpr;
  }
}          

Expr Expr10() :
{
  NewExpr newExpr;
  Token type;
  String typeImage;
  ConstExpr constExpr;
  Expr expr = null;

  //Expr index = null;
  Token name;
  Expr ref = null;
}
{
    <NEW> type = <ID> expr = Expr10a(type.image) 
    { 
      return expr; 
    }
  | constExpr = ConstExp() 
    { 
      return constExpr; 
    }
  | <LPARAN> expr = Expr1() <RPARAN> 
    { 
      return expr; 
    }
  | expr = VarExpr()
    {
      return expr;
    } 
}


Expr Expr10a(String type) :
{  
  NewExpr newExpr;
  NewArrayExpr newArrayExpr;
  Expr size;
}
{
    <LPARAN>
    <RPARAN> 
    {
      newExpr = new NewExpr(JavaCharStream.getBeginLine(), type); 
      return newExpr;
    }
  | <LBRACK> size = Expr10b() <RBRACK> 
    { 
      newArrayExpr = new NewArrayExpr(JavaCharStream.getBeginLine(), type, 
                                                                        size); 
      return newArrayExpr;
    }
}
Expr Expr10b() : 
{
  Expr expr;
} 
{ 
  expr = Expr1() 
    { 
      return expr; 
    } 
| {return null;} 
}

Expr VarExpr() :
{
  Token name;
  Expr index = null;
  Expr expr = null;
  Expr ref = null;
}
{
  name = <ID> //VarExpressions

  {
    if (expr == null) {
      expr = new VarExpr(JavaCharStream.getBeginLine(), ref, name.image);
    }
    ref = expr;
  }
  expr = VarExpra(ref) 
  { 
    return expr; 
  } 
}

Expr VarExpra(Expr ref) :
{
  Token name;
  Expr index = null;
  Expr expr = null;
}
{
    <PERIOD> name = <ID>
    {
      if (expr == null) {
        expr = new VarExpr(JavaCharStream.getBeginLine(), ref, name.image);
      }
      ref = expr;
    }
    expr = VarExpra(ref) 
    { 
      return expr;
    } 
  | 
    { 
      return ref; 
    }
}

ConstExpr ConstExp() :
{
  ConstExpr constExpr;
  Token t;
}
{
    t = <INT_CONST> { 
      constExpr = new ConstIntExpr(JavaCharStream.getBeginLine(), t.image); 
      return constExpr;
      }
  | t = <BOOLEAN_CONST> { 
      constExpr = new ConstBooleanExpr(JavaCharStream.getBeginLine(), t.image); 
      return constExpr; 
      }
  | t = <STRING_CONST>{ 

      if (t.image.charAt(0) == '"') {
        t.image = t.image.substring(1);
      }
      if (t.image.charAt(t.image.length() - 1) == '"') {
        t.image = t.image.substring(0,t.image.length() - 1);
      }

      int index = t.image.indexOf("\\n");
      int currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\n' 
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\\n");
        index += currIndex;
      }

      index = t.image.indexOf("\\t");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\t' 
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\\t");
        index += currIndex;
      }

      index = t.image.indexOf("\\f");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\f' 
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\\f");
        index += currIndex;
      }

      index = t.image.indexOf("\\\"");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\"' 
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\\\"");
        index += currIndex;
      }

      index = t.image.indexOf("\\\\");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\\' 
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\\\\");
        index += currIndex;
      }
      
      constExpr = new ConstStringExpr(JavaCharStream.getBeginLine(), t.image); 
      return constExpr; 
      }
}
