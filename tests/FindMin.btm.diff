1,59c1,102
< // Source file: FindMin.btm
< // Source line: 1
< class Main extends Object {
<     // Source line: 2
<     void main() {
<         // Source line: 3
<         TextIO io = (/*L3,type:TextIO*/new TextIO());
<         // Source line: 4
<         int min = (/*L4,type:int*/0);
<         // Source line: 6
<         int n = (/*L6,type:int*/-((/*L6,type:int*/1)));
<         // Source line: 7
<         while ((/*L7,type:boolean*/(/*L7,type:int*/n) < (/*L7,type:int*/0)))
<             // Source line: 7
<             {
<                 // Source line: 8
<                 (/*L8,type:TextIO*/(/*L8,type:TextIO*/io).putString((/*L8,type:String*/"Enter number of times to repeat: ")));
<                 // Source line: 9
<                 (/*L9,type:int*/n = (/*L9,type:int*/(/*L9,type:TextIO*/io).getInt()));
<                 // Source line: 10
<                 if ((/*L10,type:boolean*/(/*L10,type:int*/n) < (/*L10,type:int*/0)))
<                     // Source line: 11
<                     (/*L11,type:TextIO*/(/*L11,type:TextIO*/io).putString((/*L11,type:String*/"Error: must enter non-negative number\n")));
<                 else
<                     // Source line: 10
<                     {
<                     }
<             }
<         // Source line: 13
<         (/*L13,type:TextIO*/(/*L13,type:TextIO*/io).putString((/*L13,type:String*/"\n")));
<         // Source line: 15
<         int i = (/*L15,type:int*/1);
<         // Source line: 16
<         while ((/*L16,type:boolean*/(/*L16,type:int*/i) <= (/*L16,type:int*/n)))
<             // Source line: 16
<             {
<                 // Source line: 17
<                 (/*L17,type:TextIO*/(/*L17,type:TextIO*/(/*L17,type:TextIO*/(/*L17,type:TextIO*/io).putString((/*L17,type:String*/"Enter number "))).putInt((/*L17,type:int*/i))).putString((/*L17,type:String*/": ")));
<                 // Source line: 18
<                 int userInput = (/*L18,type:int*/(/*L18,type:TextIO*/io).getInt());
<                 // Source line: 19
<                 if ((/*L19,type:boolean*/(/*L19,type:boolean*/(/*L19,type:int*/userInput) < (/*L19,type:int*/min)) || (/*L19,type:boolean*/(/*L19,type:int*/i) == (/*L19,type:int*/1))))
<                     // Source line: 20
<                     (/*L20,type:int*/min = (/*L20,type:int*/userInput));
<                 else
<                     // Source line: 19
<                     {
<                     }
<                 // Source line: 21
<                 (/*L21,type:TextIO*/(/*L21,type:TextIO*/(/*L21,type:TextIO*/(/*L21,type:TextIO*/io).putString((/*L21,type:String*/"You entered: "))).putInt((/*L21,type:int*/userInput))).putString((/*L21,type:String*/"\n\n")));
<                 // Source line: 22
<                 (/*L22,type:int*/i = (/*L22,type:int*/(/*L22,type:int*/i) + (/*L22,type:int*/1)));
<             }
<         // Source line: 25
<         (/*L25,type:TextIO*/(/*L25,type:TextIO*/(/*L25,type:TextIO*/(/*L25,type:TextIO*/io).putString((/*L25,type:String*/"The minimum number entered was: "))).putInt((/*L25,type:int*/min))).putString((/*L25,type:String*/"\n")));
<         // Source line: 27
<         return;
<     }
< }
---
> 
> C:\Users\ZachA\OneDrive - University of Wisconsin Oshkosh\Spring 2025\CS 431\a4\tests>java -classpath "C:\Users\ZachA\OneDrive - University of Wisconsin Oshkosh\Spring 2025\CS 431\a4\src" Main FindMin.btm 
> class: String value: util.ClassTreeNode@5b6f7412
> class: Object value: util.ClassTreeNode@27973e9b
> class: Sys value: util.ClassTreeNode@312b1dae
> class: Main value: util.ClassTreeNode@7530d0a
> class: TextIO value: util.ClassTreeNode@27bc2616
> Main
> Class: Object
> Entered Scope, scopes = 0
> Entered Scope, scopes = 0
> Class: Object
> Entered Scope, scopes = 1
> Entered Scope, scopes = 1
> Scope level 2, contains:
> Class: Object
> Exited Scope, scopes = 2
> Exited Scope, scopes = 2
> Class: Object
> Entered Scope, scopes = 1
> Entered Scope, scopes = 1
> Class: Object
> Entered Scope, scopes = 2
> Entered Scope, scopes = 2
> Scope level 3, contains:
> Class: Object
> Exited Scope, scopes = 3
> Exited Scope, scopes = 3
> Class: Object
> Exited Scope, scopes = 2
> Exited Scope, scopes = 2
> Class: Object
> Exited Scope, scopes = 1
> Exited Scope, scopes = 1
> Curr Class: Object, num of children: 1ClassTreeNode
> Class: Object
> Entered Scope, scopes = 0
> Entered Scope, scopes = 0
> Method
> Class: Object
> Entered Scope, scopes = 1
> Entered Scope, scopes = 1
> Method
> Class: Object
> Exited Scope, scopes = 2
> Exited Scope, scopes = 2
> Class: Object
> Entered Scope, scopes = 1
> Entered Scope, scopes = 1
> Curr Class: Main, num of children: 0ClassTreeNode
> Class: Main
> Entered Scope, scopes = 0
> Entered Scope, scopes = 0
> Method
> Class: Main
> Entered Scope, scopes = 1
> Entered Scope, scopes = 1
> Scope level 2, contains:
> Scope level 2, contains:
> key: io, value TextIO
> Scope level 2, contains:
> key: this.io, value TextIO
> key: io, value TextIO
> Scope level 2, contains:
> key: min, value int
> key: this.io, value TextIO
> key: io, value TextIO
> Scope level 2, contains:
> key: min, value int
> key: this.io, value TextIO
> key: this.min, value int
> key: io, value TextIO
> Scope level 2, contains:
> key: min, value int
> key: this.io, value TextIO
> key: n, value int
> key: this.min, value int
> key: io, value TextIO
> java.lang.NullPointerException: Cannot invoke "Object.hashCode()" because "key" is null
>         at java.base/java.util.Hashtable.get(Hashtable.java:381)
>         at util.ClassTreeNode.lookupClass(Unknown Source)
>         at visitor.SemantVisitor.typeExists(Unknown Source)
>         at visitor.SemantVisitor.conformsTo(Unknown Source)
>         at visitor.TypeCheckVisitor.binaryCompExpr(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at ast.BinaryCompLtExpr.accept(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at ast.WhileStmt.accept(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at ast.StmtList.accept(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at ast.Method.accept(Unknown Source)
>         at visitor.Visitor.visit(Unknown Source)
>         at ast.MemberList.accept(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at ast.Class_.accept(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at visitor.TypeCheckVisitor.visit(Unknown Source)
>         at semant.SemanticAnalyzer.typeCheck(Unknown Source)
>         at semant.SemanticAnalyzer.analyze(Unknown Source)
>         at Main.main(Unknown Source)
> Internal error within compiler: stopping compilation
