/* Generated By:JavaCC: Do not edit this line. Parser.java */
  package parser;

  import ast.*;
  import util.ErrorHandler;
  import java.util.Stack;
  import java.util.Iterator;

  /** A class for performing syntactic analysis
   * */
  public class Parser implements ParserConstants {
      /** Maximum string size allowed */
      public static final int MAX_STRING_SIZE = 5000;
      /** Is debugging enabled? */
      private static boolean debug = false;
      /** Filenames of source files */
      private static String[] filenames = null;
      /** Input streams of source files */
      private static java.io.FileInputStream[] fileReaders = null;
      /** Current file number (index into filenames and fileReaders) */
      private static int fileCnt = 0;

      public Parser(String[] filenames, boolean debug) {
          // set debugging flag
          this.debug = debug;

          // initialize filenames field to parameter filenames
          // used later for finding the name of the current file
          this.filenames = filenames;

          // check that there is at least one specified filename
          if (filenames.length == 0)
              throw new RuntimeException(
                     "Must specify at least one filename to scan");
          // must initialize readers for each file (FileInputStream)
          fileReaders = new java.io.FileInputStream[filenames.length];
          for (int i = 0; i < filenames.length; i++) {
              // try...catch checks if file is found
              try {
                  // create the ith file reader
                  fileReaders[i] = new java.io.FileInputStream(filenames[i]);
              }
              catch(java.io.FileNotFoundException e) {
                  // if file not found then report an error and exit
                  System.err.println("Error: file '" +
                                     filenames[i] + "' not found");
                  System.exit(1);
              }
          }

          if (jj_initialized_once) {
              System.out.println(
              "ERROR: Second call to constructor of static parser.  You must" +
              "       either use ReInit() or set the JavaCC option STATIC to " +
              "false       during parser generation.");
              throw new Error();
          }
          jj_initialized_once = true;

          try { jj_input_stream =
                      new JavaCharStream(fileReaders[0], null, 1, 1); }
          catch(java.io.UnsupportedEncodingException e) {
              throw new RuntimeException(e);
          }

          ReInit(fileReaders[0]);
      }

      /** Parse the program
        * @return parsed program as an AST (abstract syntax tree)
        * */
      public Program parse() {
          // initialize the error handler and class list
          ErrorHandler errorHandler = new ErrorHandler();
          ClassList classList = new ClassList(0);

          // loop over the files
          for (fileCnt = 0; fileCnt < fileReaders.length; fileCnt++) {
              try {
                  if (fileCnt > 0)
                        jj_input_stream.ReInit(fileReaders[fileCnt], 1, 1);
                  Program p = Parser.Program();

                  for (Iterator iter = p.getClassList().getIterator();
                       iter.hasNext();
                      )
                     classList.addElement((Class_)iter.next());
              }
              catch(ParseException e) {
                  String message = e.toString();
                  int index = message.indexOf(": ");
                  message = message.substring(index+2,message.length());
                  errorHandler.register(
                       errorHandler.PARSE_ERROR, filenames[fileCnt],
                       JavaCharStream.getBeginLine(), message);
              }
          }

          errorHandler.checkErrors();

          return new Program(0, classList);
      }

      /** Get the filename of the file currently being scanned */
      public static String getCurrFilename() {
          return filenames[fileCnt];
      }

/******************************************/
/* Add your grammar rules with annotations
   below ...                              */
/******************************************/

/* 

Precedence (from highest to lowest)
10  new  ()
9   . (dispatch) [] ++ -- (postfix)[left]
8   - (unary) !     ++ -- (prefix) [right]
7   (casting)                      [right]
6   * / %                          [left]
5   + -                            [left]
4   < <= > >= instanceof           [left]
3   == !=                          [left]
2   &&                             [left]
1   ||                             [left]
0   =                              [right]

*/
  static final public Program Program() throws ParseException {
  Program program;
  ClassList classList = new ClassList(JavaCharStream.getBeginLine());
  Class_ tempClass;
  int lineNum = JavaCharStream.getBeginLine();
    label_1:
    while (true) {
      tempClass = Class();
                           classList.addElement(tempClass);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
      program = new Program(lineNum, classList);
      {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public Class_ Class() throws ParseException {
  Token name;
  Token parent = null;
  Member tempMember;
  MemberList memberList;
  Class_ classNode;
  int lineNum;
    jj_consume_token(CLASS);
      lineNum = JavaCharStream.getBeginLine();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      parent = jj_consume_token(ID);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
      memberList = new MemberList(JavaCharStream.getBeginLine());
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      tempMember = Member();
                                        memberList.addElement(tempMember);
    }
    jj_consume_token(RBRACE);
      if (parent == null) {
        classNode = new Class_(lineNum, Parser.getCurrFilename(),
                                name.image, "Object", memberList);
      } else {
        classNode = new Class_(lineNum, Parser.getCurrFilename(),
                              name.image, parent.image, memberList);
      }
      {if (true) return classNode;}
    throw new Error("Missing return statement in function");
  }

  static final public Member Member() throws ParseException {
  Member member;
  Token type;
  String typeImage;
  Token name;
    type = jj_consume_token(ID);
                typeImage = type.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
                       typeImage += "[]";
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARAN:
      member = Method(typeImage, name.image);
      break;
    case SEMICOLON:
    case ASSIGN:
      member = Field(typeImage, name.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return member;}
    throw new Error("Missing return statement in function");
  }

  static final public Method Method(String returnType, String name) throws ParseException {
  Formal tempFormal;
  FormalList formalList = null;
  Stmt tempStmt;
  StmtList stmtList;
  Method method;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(LPARAN);
      formalList = new FormalList(lineNum);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      tempFormal = Formal();
                             formalList.addElement(tempFormal);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        tempFormal = Formal();
                                     formalList.addElement(tempFormal);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPARAN);
    jj_consume_token(LBRACE);
      stmtList = new StmtList(lineNum);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case IF:
      case RETURN:
      case BREAK:
      case NEW:
      case LBRACE:
      case LPARAN:
      case MINUS:
      case NOT:
      case INCREMENT:
      case DECREMENT:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      tempStmt = Stmt();
                           stmtList.addElement(tempStmt);
    }
    jj_consume_token(RBRACE);
      method = new Method(lineNum, returnType, name, formalList, stmtList);
      {if (true) return method;}
    throw new Error("Missing return statement in function");
  }

  static final public Field Field(String type, String name) throws ParseException {
  Field field;
  Expr init = null;
  int lineNum = JavaCharStream.getBeginLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      init = Expr();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
      field = new Field(lineNum, type, name, init);
      {if (true) return field;}
    throw new Error("Missing return statement in function");
  }

  static final public Formal Formal() throws ParseException {
  Formal formal;
  Token type;
  String typeImage;
  Token name;
    type = jj_consume_token(ID);
                typeImage = type.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
                       typeImage += "[]";
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    formal = new Formal(JavaCharStream.getBeginLine(), typeImage, name.image);
    {if (true) return formal;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt Stmt() throws ParseException {
  Stmt stmt;
    if (jj_2_1(5)) {
      stmt = ExprStmt();
      {if (true) return stmt;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        stmt = DeclStmt();
      {if (true) return stmt;}
        break;
      case IF:
        stmt = IfStmt();
      {if (true) return stmt;}
        break;
      case WHILE:
        stmt = WhileStmt();
      {if (true) return stmt;}
        break;
      case FOR:
        stmt = ForStmt();
      {if (true) return stmt;}
        break;
      case BREAK:
        stmt = BreakStmt();
      {if (true) return stmt;}
        break;
      case RETURN:
        stmt = ReturnStmt();
      {if (true) return stmt;}
        break;
      case LBRACE:
        stmt = BlockStmt();
      {if (true) return stmt;}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExprStmt ExprStmt() throws ParseException {
  ExprStmt exprStmt;
  Expr expr;
  int lineNum = JavaCharStream.getBeginLine();
    expr = Expr();
    jj_consume_token(SEMICOLON);
      exprStmt = new ExprStmt(lineNum, expr);
      {if (true) return exprStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public DeclStmt DeclStmt() throws ParseException {
  DeclStmt declStmt;
  Token type;
  String typeImage;
  Token name;
  Expr init = null;
  int lineNum = JavaCharStream.getBeginLine();
    type = jj_consume_token(ID);
                typeImage = type.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
                       typeImage += "[]";
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    init = Expr();
    jj_consume_token(SEMICOLON);
      declStmt = new DeclStmt(lineNum, typeImage, name.image, init);
      {if (true) return declStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStmt IfStmt() throws ParseException {
  IfStmt ifStmt;
  Expr predExpr;
  Stmt thenStmt;
  Stmt elseStmt;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(IF);
    jj_consume_token(LPARAN);
    predExpr = Expr();
    jj_consume_token(RPARAN);
    thenStmt = Stmt();
    elseStmt = IfStmta(lineNum);
      ifStmt = new IfStmt(lineNum, predExpr, thenStmt, elseStmt);
      {if (true) return ifStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt IfStmta(int lineNum) throws ParseException {
  Stmt stmt;
  StmtList stmtList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      stmt = Stmt();
      {if (true) return stmt;}
      break;
    default:
      jj_la1[12] = jj_gen;
      stmtList = new StmtList(lineNum);
      {if (true) return new BlockStmt(lineNum, stmtList);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public WhileStmt WhileStmt() throws ParseException {
  WhileStmt whileStmt;
  Expr predExpr;
  Stmt bodyStmt;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(WHILE);
    jj_consume_token(LPARAN);
    predExpr = Expr();
    jj_consume_token(RPARAN);
    bodyStmt = Stmt();
      whileStmt = new WhileStmt(lineNum, predExpr, bodyStmt);
      {if (true) return whileStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ForStmt ForStmt() throws ParseException {
  ForStmt forStmt;
  Expr initExpr = null;
  Expr predExpr = null;
  Expr updateExpr = null;
  Stmt bodyStmt;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(FOR);
    jj_consume_token(LPARAN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LPARAN:
    case MINUS:
    case NOT:
    case INCREMENT:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      initExpr = Expr();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LPARAN:
    case MINUS:
    case NOT:
    case INCREMENT:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      predExpr = Expr();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LPARAN:
    case MINUS:
    case NOT:
    case INCREMENT:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      updateExpr = Expr();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RPARAN);
    bodyStmt = Stmt();
      forStmt = new ForStmt(lineNum, initExpr, predExpr, updateExpr, bodyStmt);
      {if (true) return forStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStmt BreakStmt() throws ParseException {
  BreakStmt breakStmt;
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
    breakStmt = new BreakStmt(JavaCharStream.getBeginLine());
    {if (true) return breakStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStmt ReturnStmt() throws ParseException {
  ReturnStmt returnStmt;
  Expr expr = null;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LPARAN:
    case MINUS:
    case NOT:
    case INCREMENT:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      expr = Expr();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    returnStmt = new ReturnStmt(lineNum, expr);
    {if (true) return returnStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStmt BlockStmt() throws ParseException {
  BlockStmt blockStmt;
  Stmt tempStmt;
  StmtList stmtList;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(LBRACE);
    stmtList = new StmtList(lineNum);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case IF:
      case RETURN:
      case BREAK:
      case NEW:
      case LBRACE:
      case LPARAN:
      case MINUS:
      case NOT:
      case INCREMENT:
      case DECREMENT:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      tempStmt = Stmt();
                       stmtList.addElement(tempStmt);
    }
    jj_consume_token(RBRACE);
    blockStmt = new BlockStmt(lineNum, stmtList);
    {if (true) return blockStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr() throws ParseException {
  Expr leftExpr;
  Expr expr;
    leftExpr = Expr1();
    expr = Expra(leftExpr);
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expra(Expr leftExpr) throws ParseException {
  Expr rightExpr;
  ArrayExpr arrayExpr;
  VarExpr varExpr;
  Expr expr = null;
  Expr index;
  String name;
  String refName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      rightExpr = Expr();
    if (leftExpr instanceof ArrayExpr) {
        arrayExpr = (ArrayExpr) leftExpr;
        name = arrayExpr.getName();
        varExpr = ((VarExpr) arrayExpr.getRef());

        if (varExpr == null) {
          refName = null;
        } else {
          refName = varExpr.getName();
        }

        index = arrayExpr.getIndex();
        expr = new ArrayAssignExpr(JavaCharStream.getBeginLine(),
                                    refName, name, index, rightExpr);
      } else if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr;
        name = varExpr.getName();
        varExpr = ((VarExpr) varExpr.getRef());

        if (varExpr == null) {
          refName = null;
        } else {
          refName = varExpr.getName();
        }

        expr = new AssignExpr(JavaCharStream.getBeginLine(), refName, name,
                                                                 rightExpr);
      } else {
        //ERROR 
        {if (true) throw new ParseException(
          "For AssignmentExpression: <?> =, ? must be VarExpr or ArrayExpr." +
           "Given: " + rightExpr.getClass().getSimpleName() + ".");}
        expr = new AssignExpr(JavaCharStream.getBeginLine(), null, "error",
                                                                      null);
      }
      {if (true) return expr;}
      break;
    default:
      jj_la1[18] = jj_gen;
      {if (true) return leftExpr;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr1() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      lineNum = JavaCharStream.getBeginLine();
      jj_consume_token(OR);
      rightExpr = Expr2();
      leftExpr = new BinaryLogicOrExpr(lineNum, leftExpr, rightExpr);
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr2() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr3();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      lineNum = JavaCharStream.getBeginLine();
      jj_consume_token(AND);
      rightExpr = Expr3();
      leftExpr = new BinaryLogicAndExpr(lineNum, leftExpr, rightExpr);
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr3() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr4();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOT_EQUALS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      lineNum = JavaCharStream.getBeginLine();
        jj_consume_token(EQUALS);
        rightExpr = Expr4();
      leftExpr = new BinaryCompEqExpr(lineNum, leftExpr, rightExpr);
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
        rightExpr = Expr4();
      leftExpr = new BinaryCompNeExpr(lineNum, leftExpr, rightExpr);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr4() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  Token type = null;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr5();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case LESS_THAN:
      case GREATER_THAN:
      case GREATER_EQUAL:
      case LESS_EQUAL:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
      lineNum = JavaCharStream.getBeginLine();
        jj_consume_token(LESS_THAN);
        rightExpr = Expr5();
      leftExpr = new BinaryCompLtExpr(lineNum, leftExpr, rightExpr);
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
        rightExpr = Expr5();
      leftExpr = new BinaryCompLeqExpr(lineNum, leftExpr, rightExpr);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        rightExpr = Expr5();
      leftExpr = new BinaryCompGtExpr(lineNum, leftExpr, rightExpr);
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        rightExpr = Expr5();
      leftExpr = new BinaryCompGeqExpr(lineNum, leftExpr, rightExpr);
        break;
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        type = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
        type.image += "[]";
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
      leftExpr = new InstanceofExpr(lineNum, leftExpr, type.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr5() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr6();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      lineNum = JavaCharStream.getBeginLine();
        jj_consume_token(PLUS);
        rightExpr = Expr6();
      leftExpr = new BinaryArithPlusExpr(lineNum, leftExpr, rightExpr);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        rightExpr = Expr6();
      leftExpr = new BinaryArithMinusExpr(lineNum, leftExpr, rightExpr);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr6() throws ParseException {
  Expr leftExpr;
  Expr rightExpr;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr7();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      lineNum = JavaCharStream.getBeginLine();
        jj_consume_token(TIMES);
        rightExpr = Expr7();
      leftExpr = new BinaryArithTimesExpr(lineNum, leftExpr, rightExpr);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        rightExpr = Expr7();
      leftExpr = new BinaryArithDivideExpr(lineNum, leftExpr, rightExpr);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        rightExpr = Expr7();
      leftExpr = new BinaryArithModulusExpr(lineNum, leftExpr, rightExpr);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr7() throws ParseException {
  Token type;
  String typeImage;
  CastExpr castExpr;
  Expr expr;
    if (jj_2_2(6)) {
      jj_consume_token(LPARAN);
      type = jj_consume_token(ID);
                           typeImage = type.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
                         typeImage += "[]";
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPARAN);
      jj_consume_token(LPARAN);
      expr = Expr1();
      jj_consume_token(RPARAN);
      castExpr = new CastExpr(JavaCharStream.getBeginLine(), typeImage, expr);
      {if (true) return castExpr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case LPARAN:
      case MINUS:
      case NOT:
      case INCREMENT:
      case DECREMENT:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        expr = Expr8();
      {if (true) return expr;}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr8() throws ParseException {
  Expr expr;
  UnaryNegExpr negExpr;
  UnaryNotExpr notExpr;
  UnaryDecrExpr decExpr;
  UnaryIncrExpr incrExpr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      expr = Expr8();
        negExpr = new UnaryNegExpr(JavaCharStream.getBeginLine(), expr);
        {if (true) return negExpr;}
      break;
    case NOT:
      jj_consume_token(NOT);
      expr = Expr8();
        notExpr = new UnaryNotExpr(JavaCharStream.getBeginLine(), expr);
        {if (true) return notExpr;}
      break;
    case DECREMENT:
      jj_consume_token(DECREMENT);
      expr = Expr8();
        decExpr = new UnaryDecrExpr(JavaCharStream.getBeginLine(), expr,
                                                                        false);
        {if (true) return decExpr;}
      break;
    case INCREMENT:
      jj_consume_token(INCREMENT);
      expr = Expr8();
        incrExpr = new UnaryIncrExpr(JavaCharStream.getBeginLine(), expr,
                                                                        false);
        {if (true) return incrExpr;}
      break;
    case NEW:
    case LPARAN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      expr = Expr9();
        {if (true) return expr;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr9() throws ParseException {
  Expr leftExpr;
  VarExpr varExpr = null;
  ArrayExpr arrayExpr = null;
  Expr index = null;
  Expr tempArg = null;
  ExprList args = null;
  Token name;
  int lineNum = JavaCharStream.getBeginLine();
    leftExpr = Expr10();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
      case LENGTH:
      case LPARAN:
      case PERIOD:
      case INCREMENT:
      case DECREMENT:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
      lineNum = JavaCharStream.getBeginLine();
        jj_consume_token(INCREMENT);
      leftExpr = new UnaryIncrExpr(lineNum, leftExpr, true);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
      leftExpr = new UnaryDecrExpr(lineNum, leftExpr, true);
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
        index = Expr1();
        jj_consume_token(RBRACK);
      if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr;
      } else { //Error
        {if (true) throw new ParseException("For ArrayExpr: <?> [index], ? must be a"
          + "VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");}
        varExpr = new VarExpr(JavaCharStream.getBeginLine(), null, "error");
      }
      leftExpr = new ArrayExpr(JavaCharStream.getBeginLine(), varExpr.getRef(),
                                                     varExpr.getName(), index);
        break;
      case PERIOD:
        jj_consume_token(PERIOD);
        name = jj_consume_token(ID);
      args = new ExprList(JavaCharStream.getBeginLine());
        jj_consume_token(LPARAN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case LPARAN:
        case MINUS:
        case NOT:
        case INCREMENT:
        case DECREMENT:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:
        case ID:
          tempArg = Expr1();
                            args.addElement(tempArg);
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[34] = jj_gen;
              break label_13;
            }
            jj_consume_token(COMMA);
            tempArg = Expr1();
            args.addElement(tempArg);
          }
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(RPARAN);
     if (name == null) {//ASSUMPTION leftExpr is VarExpr
        varExpr = (VarExpr) leftExpr;
        if (varExpr.getRef() == null) {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(),
            new VarExpr(JavaCharStream.getBeginLine(), null, "this"),
            varExpr.getName(), args);
        } else {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(),
            varExpr.getRef(), varExpr.getName(), args);
        }
      } else {
        leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(), leftExpr,
          name.image, args);
      }
        break;
      case LPARAN:
      args = new ExprList(JavaCharStream.getBeginLine());
        jj_consume_token(LPARAN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case LPARAN:
        case MINUS:
        case NOT:
        case INCREMENT:
        case DECREMENT:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:
        case ID:
          tempArg = Expr1();
                          args.addElement(tempArg);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[36] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            tempArg = Expr1();
          args.addElement(tempArg);
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(RPARAN);
      if (leftExpr instanceof VarExpr) {
        varExpr = (VarExpr) leftExpr;
        if (varExpr.getRef() == null) {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(),
            new VarExpr(JavaCharStream.getBeginLine(), null, "this"),
            varExpr.getName(), args);
        } else {
          leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(),
            varExpr.getRef(), varExpr.getName(), args);
        }
      } else { //Error
        {if (true) throw new ParseException("For ArrayExpr: <?> [index], ? must be a"
          + "VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");}
        leftExpr = new DispatchExpr(JavaCharStream.getBeginLine(),
          new VarExpr(JavaCharStream.getBeginLine(), null, "this"),
          "error", args);
      }
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
      if (leftExpr instanceof NewArrayExpr || leftExpr instanceof VarExpr) {
        leftExpr = new VarExpr(JavaCharStream.getBeginLine(), leftExpr, "length");
      } else { //Error
        {if (true) throw new ParseException("For ArrayExpr: <?> [index], ? must be a "
          + "NewArrayExpr or VarExpr. Given: " + leftExpr.getClass().getSimpleName() + ".");}
        leftExpr = new VarExpr(JavaCharStream.getBeginLine(),
          new VarExpr(JavaCharStream.getBeginLine(), null, "this"),
          "error");
      }
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr10() throws ParseException {
  NewExpr newExpr;
  Token type;
  String typeImage;
  ConstExpr constExpr;
  Expr expr = null;

  //Expr index = null;
  Token name;
  Expr ref = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      type = jj_consume_token(ID);
      expr = Expr10a(type.image);
      {if (true) return expr;}
      break;
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
      constExpr = ConstExp();
      {if (true) return constExpr;}
      break;
    case LPARAN:
      jj_consume_token(LPARAN);
      expr = Expr1();
      jj_consume_token(RPARAN);
      {if (true) return expr;}
      break;
    case ID:
      expr = VarExpr();
      {if (true) return expr;}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr10a(String type) throws ParseException {
  NewExpr newExpr;
  NewArrayExpr newArrayExpr;
  Expr size;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARAN:
      jj_consume_token(LPARAN);
      jj_consume_token(RPARAN);
      newExpr = new NewExpr(JavaCharStream.getBeginLine(), type);
      {if (true) return newExpr;}
      break;
    case LBRACK:
      jj_consume_token(LBRACK);
      size = Expr10b();
      jj_consume_token(RBRACK);
      newArrayExpr = new NewArrayExpr(JavaCharStream.getBeginLine(), type,
                                                                        size);
      {if (true) return newArrayExpr;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr10b() throws ParseException {
  Expr expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LPARAN:
    case MINUS:
    case NOT:
    case INCREMENT:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      expr = Expr1();
      {if (true) return expr;}
      break;
    default:
      jj_la1[41] = jj_gen;
   {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr VarExpr() throws ParseException {
  Token name;
  Expr index = null;
  Expr expr = null;
  Expr ref = null;
    name = jj_consume_token(ID);
    if (expr == null) {
      expr = new VarExpr(JavaCharStream.getBeginLine(), ref, name.image);
    }
    ref = expr;
    expr = VarExpra(ref);
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr VarExpra(Expr ref) throws ParseException {
  Token name;
  Expr index = null;
  Expr expr = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERIOD:
      jj_consume_token(PERIOD);
      name = jj_consume_token(ID);
      if (expr == null) {
        expr = new VarExpr(JavaCharStream.getBeginLine(), ref, name.image);
      }
      ref = expr;
      expr = VarExpra(ref);
      {if (true) return expr;}
      break;
    default:
      jj_la1[42] = jj_gen;
      {if (true) return ref;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ConstExpr ConstExp() throws ParseException {
  ConstExpr constExpr;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_CONST:
      t = jj_consume_token(INT_CONST);
      constExpr = new ConstIntExpr(JavaCharStream.getBeginLine(), t.image);
      {if (true) return constExpr;}
      break;
    case BOOLEAN_CONST:
      t = jj_consume_token(BOOLEAN_CONST);
      constExpr = new ConstBooleanExpr(JavaCharStream.getBeginLine(), t.image);
      {if (true) return constExpr;}
      break;
    case STRING_CONST:
      t = jj_consume_token(STRING_CONST);
      if (t.image.charAt(0) == '"') {
        t.image = t.image.substring(1);
      }
      if (t.image.charAt(t.image.length() - 1) == '"') {
        t.image = t.image.substring(0,t.image.length() - 1);
      }

      int index = t.image.indexOf("\u005c\u005cn");
      int currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\u005cn'
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\u005c\u005cn");
        index += currIndex;
      }

      index = t.image.indexOf("\u005c\u005ct");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\u005ct'
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\u005c\u005ct");
        index += currIndex;
      }

      index = t.image.indexOf("\u005c\u005cf");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\u005cf'
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\u005c\u005cf");
        index += currIndex;
      }

      index = t.image.indexOf("\u005c\u005c\u005c"");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\u005c"'
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\u005c\u005c\u005c"");
        index += currIndex;
      }

      index = t.image.indexOf("\u005c\u005c\u005c\u005c");
      currIndex = index;
      while ( currIndex > -1) {
        t.image = t.image.substring(0, index) + '\u005c\u005c'
          + t.image.substring(index + 2);
        currIndex = t.image.substring(index).indexOf("\u005c\u005c\u005c\u005c");
        index += currIndex;
      }

      constExpr = new ConstStringExpr(JavaCharStream.getBeginLine(), t.image);
      {if (true) return constExpr;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_83() {
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(INCREMENT)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(DECREMENT)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(LPARAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(RPARAN)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(LPARAN)) return true;
    if (jj_scan_token(RPARAN)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_17()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(STRING_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(BOOLEAN_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(INT_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(LPARAN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RPARAN)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LPARAN)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(RPARAN)) return true;
    if (jj_scan_token(LPARAN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RPARAN)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(RPARAN)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(GREATER_THAN)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x4,0x0,0x2000,0x4090000,0x40000,0x0,0x410bb8,0x4000000,0x2000,0x9b8,0x2000,0x40,0x410200,0x410200,0x410200,0x410200,0x410bb8,0x4000000,0x0,0x0,0x18000000,0x18000000,0xe0000400,0x2000,0xe0000400,0x600000,0x600000,0x3800000,0x3800000,0x2000,0x410200,0x410200,0x11a000,0x40000,0x410200,0x40000,0x410200,0x11a000,0x10200,0x12000,0x410200,0x100000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x0,0x0,0x0,0x1000,0x1e62,0x0,0x0,0x1000,0x0,0x0,0x1e62,0x1e62,0x1e62,0x1e62,0x1e62,0x0,0x8,0x4,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1e62,0x1e62,0x60,0x0,0x1e62,0x0,0x1e62,0x60,0x1e00,0x0,0x1e62,0x0,0xe00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
